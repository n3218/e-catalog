{"ast":null,"code":"import{createStore,applyMiddleware}from'redux';import{persistStore}from'redux-persist';import logger from'redux-logger';import createSagaMiddleware from'redux-saga';import rootReducer from'./root-reducer';import rootSaga from'./root-saga';var sagaMiddleware=createSagaMiddleware();var middlewares=[sagaMiddleware];console.log(process.env.NODE_ENV);if(process.env.NODE_ENV==='development'){middlewares.push(logger);}export var store=createStore(rootReducer,applyMiddleware.apply(void 0,middlewares));sagaMiddleware.run(rootSaga);export var persistor=persistStore(store);export default{store:store,persistor:persistor};","map":{"version":3,"sources":["/projects/udemy/e-catalog/client/src/redux/store.js"],"names":["createStore","applyMiddleware","persistStore","logger","createSagaMiddleware","rootReducer","rootSaga","sagaMiddleware","middlewares","console","log","process","env","NODE_ENV","push","store","run","persistor"],"mappings":"AAAA,OAASA,WAAT,CAAsBC,eAAtB,KAA6C,OAA7C,CACA,OAASC,YAAT,KAA6B,eAA7B,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CACA,MAAOC,CAAAA,oBAAP,KAAiC,YAAjC,CACA,MAAOC,CAAAA,WAAP,KAAwB,gBAAxB,CACA,MAAOC,CAAAA,QAAP,KAAqB,aAArB,CAGA,GAAMC,CAAAA,cAAc,CAAGH,oBAAoB,EAA3C,CACA,GAAMI,CAAAA,WAAW,CAAG,CAACD,cAAD,CAApB,CAEAE,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,GAAR,CAAYC,QAAxB,EACA,GAAIF,OAAO,CAACC,GAAR,CAAYC,QAAZ,GAAyB,aAA7B,CAA4C,CACxCL,WAAW,CAACM,IAAZ,CAAiBX,MAAjB,EACH,CAED,MAAO,IAAMY,CAAAA,KAAK,CAAGf,WAAW,CAACK,WAAD,CAAcJ,eAAe,MAAf,QAAmBO,WAAnB,CAAd,CAAzB,CAEPD,cAAc,CAACS,GAAf,CAAmBV,QAAnB,EAEA,MAAO,IAAMW,CAAAA,SAAS,CAAGf,YAAY,CAACa,KAAD,CAA9B,CAEP,cAAe,CAAEA,KAAK,CAALA,KAAF,CAASE,SAAS,CAATA,SAAT,CAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { persistStore } from 'redux-persist';\nimport logger from 'redux-logger';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './root-reducer';\nimport rootSaga from './root-saga';\n\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware]\n\nconsole.log(process.env.NODE_ENV)\nif (process.env.NODE_ENV === 'development') {\n    middlewares.push(logger);\n}\n\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares))\n\nsagaMiddleware.run(rootSaga)\n\nexport const persistor = persistStore(store)\n\nexport default { store, persistor }"]},"metadata":{},"sourceType":"module"}
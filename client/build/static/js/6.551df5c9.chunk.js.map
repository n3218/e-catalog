{"version":3,"sources":["pages/collection/collection.component.jsx","pages/collection/collection.container.jsx","redux/shop/shop.selectors.js","components/with-spinner/with-spinner.component.jsx","components/collection-item/collection-item.component.jsx"],"names":["connect","state","ownProps","collection","selectCollection","match","params","collectionId","title","items","className","map","item","key","id","mapStateToProps","createStructuredSelector","isLoading","selectIsCollectionsLoaded","CollectionPageContainer","compose","WithSpinner","CollectionPage","selectShop","shop","selectCollections","createSelector","collections","selectCollectionsForPreview","Object","keys","collectionUrlParam","selectIsCollectionFitching","isFetching","WrappedComponent","otherProps","dispatch","addItem","name","price","imageUrl","style","backgroundImage","onClick","inverted"],"mappings":"wNA0BeA,eAJS,SAACC,EAAOC,GAAR,MAAsB,CAC1CC,WAAYC,YAAiBF,EAASG,MAAMC,OAAOC,aAAvCH,CAAqDH,MAGtDD,EAnBQ,SAAC,GAAoB,IAAlBG,EAAiB,EAAjBA,WAEdK,EAAiBL,EAAjBK,MAAOC,EAAUN,EAAVM,MACf,OACI,yBAAKC,UAAU,mBACX,wBAAIA,UAAU,SAASF,GACvB,yBAAKE,UAAU,mBACbD,EAAME,KAAI,SAACC,GAAD,OACR,kBAAC,IAAD,CAAgBC,IAAKD,EAAKE,GAAIF,KAAMA,YCN9CG,EAAkBC,YAAyB,CAC7CC,UAAW,SAAAhB,GAAK,OAAKiB,YAA0BjB,MAG7CkB,EAA0BC,YAC5BpB,YAAQe,GACRM,IAF4BD,CAG9BE,GAEaH,a,gCClBf,oJAGMI,EAAa,SAAAtB,GAAK,OAAIA,EAAMuB,MAErBC,EAAoBC,YAC7B,CAACH,IACD,SAAAC,GAAI,OAAIA,EAAKG,eAGJC,EAA8BF,YACvC,CAACD,IACD,SAAAE,GAAW,OAAIA,EACTE,OAAOC,KAAKH,GAAahB,KAAI,SAAAE,GAAG,OAAIc,EAAYd,MAChD,MAGGT,EAAmB,SAAA2B,GAAkB,OAAIL,YAClD,CAACD,IACD,SAAAE,GAAW,OAAIA,EACTA,EAAYI,GACZ,SAGGC,EAA6BN,YACtC,CAACH,IACD,SAAAC,GAAI,OAAIA,EAAKS,cAGJf,EAA4BQ,YACrC,CAACH,IACD,SAAAC,GAAI,QAAMA,EAAKG,gB,oECpBJN,IAPK,SAAAa,GAAgB,OAAI,YAAmC,IAAhCjB,EAA+B,EAA/BA,UAAckB,EAAiB,6BACtE,OAAOlB,EACD,kBAAC,IAAD,MACA,kBAACiB,EAAqBC,M,gCCPhC,oDA8BenC,gBAAQ,MALI,SAAAoC,GAAQ,MAAK,CACpCC,QAAS,SAAAzB,GAAI,OAAIwB,EAASC,YAAQzB,QAIvBZ,EAxBQ,SAAC,GAAuB,IAArBY,EAAoB,EAApBA,KAAMyB,EAAc,EAAdA,QACrBC,EAAyB1B,EAAzB0B,KAAMC,EAAmB3B,EAAnB2B,MAAOC,EAAY5B,EAAZ4B,SACpB,OACA,yBAAK9B,UAAU,mBACX,yBAAKA,UAAU,QACX+B,MAAO,CAAEC,gBAAgB,OAAD,OAASF,EAAT,QAE5B,yBAAK9B,UAAU,eACX,0BAAMA,UAAU,QAAQ4B,GACxB,0BAAM5B,UAAU,SAAhB,IAA0B6B,IAE9B,kBAAC,IAAD,CACII,QAAS,kBAAMN,EAAQzB,IACvBgC,UAAQ,GAFZ,oB","file":"static/js/6.551df5c9.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport './collection.styles.scss';\nimport CollectionItem from '../../components/collection-item/collection-item.component';\nimport { selectCollection } from '../../redux/shop/shop.selectors';\n\n\nconst CollectionPage = ({ collection }) => {\n\n    const { title, items } = collection\n    return (\n        <div className='collection-page'>\n            <h1 className='title'>{title}</h1>\n            <div className='items-container'>\n            { items.map((item) =>\n                <CollectionItem key={item.id} item={item} />\n            )}\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state, ownProps) => ({\n    collection: selectCollection(ownProps.match.params.collectionId)(state)\n})\n\nexport default connect(mapStateToProps)(CollectionPage);","import { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { selectIsCollectionsLoaded } from '../../redux/shop/shop.selectors';\nimport WithSpinner from '../../components/with-spinner/with-spinner.component';\nimport CollectionPage from './collection.component';\n\n\nconst mapStateToProps = createStructuredSelector({\n    isLoading: state => !selectIsCollectionsLoaded(state)\n})\n\nconst CollectionPageContainer = compose(\n    connect(mapStateToProps),\n    WithSpinner\n)(CollectionPage)\n\nexport default CollectionPageContainer;","import { createSelector } from 'reselect';\n\n\nconst selectShop = state => state.shop;\n\nexport const selectCollections = createSelector(\n    [selectShop],\n    shop => shop.collections\n)\n\nexport const selectCollectionsForPreview = createSelector(\n    [selectCollections],\n    collections => collections \n        ? Object.keys(collections).map(key => collections[key])\n        : []\n)\n\nexport const selectCollection = collectionUrlParam => createSelector(\n    [selectCollections],\n    collections => collections\n        ? collections[collectionUrlParam]\n        : null\n)\n\nexport const selectIsCollectionFitching = createSelector(\n    [selectShop],\n    shop => shop.isFetching\n)\n\nexport const selectIsCollectionsLoaded = createSelector(\n    [selectShop],\n    shop => !!shop.collections\n)","import React from 'react';\nimport Spinner from '../spinner/spinner.component';\n\n\nconst WithSpinner = WrappedComponent => ({ isLoading, ...otherProps }) => {\n    return isLoading\n        ? <Spinner />\n        : <WrappedComponent {...otherProps} />\n}\n\n\nexport default WithSpinner;","import React from 'react';\nimport { connect } from 'react-redux';\nimport './collection-item.styles.scss';\nimport CustomButton from '../custom-button/custom-button.component';\nimport { addItem } from '../../redux/cart/cart.actions';\n\nconst CollectionItem = ({ item, addItem }) => {\n    const {name, price, imageUrl} = item\n    return (\n    <div className='collection-item'>\n        <div className='image'\n            style={{ backgroundImage: `url(${imageUrl})` }} >\n        </div>\n        <div className='item-footer'>\n            <span className='name'>{name}</span>\n            <span className='price'>${price}</span>\n        </div>\n        <CustomButton \n            onClick={() => addItem(item)}\n            inverted >\n            Add to cart\n        </CustomButton>\n    </div>\n)}\n\nconst mapDispatchToProps = dispatch => ({\n    addItem: item => dispatch(addItem(item))\n\n})\n\nexport default connect(null, mapDispatchToProps)(CollectionItem);"],"sourceRoot":""}
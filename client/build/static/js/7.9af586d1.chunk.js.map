{"version":3,"sources":["components/checkout-item/checkout-item.component.jsx","components/strip-button/strip-button.component.jsx","pages/checkout/checkout.component.jsx"],"names":["connect","dispatch","clearItem","item","clearItemFromCart","addItem","removeItem","cartItem","imageUrl","name","quantity","price","className","src","alt","onClick","StripeCheckoutButton","PriceForStripe","label","billingAddress","shippingAddress","image","description","amount","panelLabel","token","axios","url","method","data","then","response","alert","catch","error","console","log","JSON","parse","stripeKey","mapStateToProps","createStructuredSelector","cartItems","selectCartItems","total","selectCartTotal","map","key","id"],"mappings":"uOA+BeA,cAAQ,MANI,SAAAC,GAAQ,MAAK,CACtCC,UAAW,SAAAC,GAAI,OAAIF,EAASG,YAAkBD,KAC9CE,QAAS,SAAAF,GAAI,OAAIF,EAASI,YAAQF,KAClCG,WAAY,SAAAH,GAAI,OAAIF,EAASK,YAAWH,QAG3BH,EAzBM,SAAC,GAAgD,IAA/CO,EAA8C,EAA9CA,SAAUL,EAAoC,EAApCA,UAAWG,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WAC3CE,EAAoCD,EAApCC,SAAUC,EAA0BF,EAA1BE,KAAMC,EAAoBH,EAApBG,SAAUC,EAAUJ,EAAVI,MAClC,OACE,yBAAKC,UAAU,iBACb,yBAAKA,UAAU,mBACb,yBAAKC,IAAKL,EAAUM,IAAKL,KAE3B,0BAAMG,UAAU,QAAQH,GACxB,0BAAMG,UAAU,YACd,yBAAKG,QAAS,kBAAMT,EAAWC,IAAWK,UAAU,SAApD,UACA,0BAAMA,UAAU,SAASF,GACzB,yBAAKK,QAAS,kBAAMV,EAAQE,IAAWK,UAAU,SAAjD,WAEF,0BAAMA,UAAU,SAAhB,IAA0BD,GAC1B,yBAAKI,QAAS,kBAAMb,EAAUK,IAAWK,UAAU,iBAAnD,c,oCCqBSI,EApCc,SAAC,GAAe,IAAbL,EAAY,EAAZA,MACtBM,EAAyB,IAARN,EAmBvB,OACI,kBAAC,IAAD,CACIO,MAAM,UACNT,KAAK,YACLU,gBAAc,EACdC,iBAAe,EACfC,MAAM,iCACNC,YAAW,yBAAoBX,GAC/BY,OAAQN,EACRO,WAAW,UACXC,MA1BQ,SAAAA,GACZC,IAAM,CACFC,IAAK,UACLC,OAAQ,OACRC,KAAM,CACFN,OAAQN,EACRQ,WAELK,MAAK,SAAAC,GACJC,MAAM,yBACPC,OAAM,SAAAC,GACLC,QAAQC,IAAI,kBAAmBC,KAAKC,MAAMJ,IAC1CF,MAAM,0FAeNO,UA7Be,gDCkCrBC,EAAkBC,YAAyB,CAC7CC,UAAWC,IACXC,MAAOC,MAGI7C,sBAAQwC,EAARxC,EArCM,SAAC,GAAD,IAAG0C,EAAH,EAAGA,UAAWE,EAAd,EAAcA,MAAd,OACjB,yBAAKhC,UAAU,iBACX,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,gBACX,0CAEJ,yBAAKA,UAAU,gBACX,8CAEJ,yBAAKA,UAAU,gBACX,2CAEJ,yBAAKA,UAAU,gBACX,wCAEJ,yBAAKA,UAAU,gBACX,0CAGH8B,EAAUI,KAAI,SAAAvC,GAAQ,OACnB,kBAAC,EAAD,CAAcwC,IAAKxC,EAASyC,GAAIzC,SAAUA,OAElD,yBAAKK,UAAU,SAAf,WAAgCgC,GAChC,yBAAKhC,UAAU,gBAAf,0DAEI,6BAFJ,+DAKA,kBAAC,EAAD,CAAsBD,MAAOiC","file":"static/js/7.9af586d1.chunk.js","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\n\nimport './checkout-item.styles.scss';\nimport { clearItemFromCart, addItem, removeItem } from '../../redux/cart/cart.actions';\n\nconst CheckoutItem = ({cartItem, clearItem, addItem, removeItem}) => {\n  const { imageUrl, name, quantity, price } = cartItem\n  return (\n    <div className='checkout-item'>\n      <div className='image-container'>\n        <img src={imageUrl} alt={name} />\n      </div>\n      <span className='name'>{name}</span>\n      <span className='quantity'>\n        <div onClick={() => removeItem(cartItem)} className='arrow'>&#10094;</div>\n        <span className='value'>{quantity}</span>\n        <div onClick={() => addItem(cartItem)} className='arrow'>&#10095;</div>\n      </span>\n      <span className='price'>${price}</span>\n      <div onClick={() => clearItem(cartItem)} className='remove-button'>&#10005;</div>\n    </div>\n  )\n}\n\nconst mapDispatchToProps = dispatch => ({\n  clearItem: item => dispatch(clearItemFromCart(item)),\n  addItem: item => dispatch(addItem(item)),\n  removeItem: item => dispatch(removeItem(item))\n})\n\nexport default connect(null, mapDispatchToProps)(CheckoutItem);","import React from 'react';\nimport StripeCheckout from 'react-stripe-checkout';\nimport axios from 'axios'\n\n\nconst StripeCheckoutButton = ({ price }) => {\n    const PriceForStripe = price * 100;\n    const publishableKey = 'pk_test_WhV5k5Kem5NFpPVr5jRNv8l100xKDl1LYd';\n   \n    const onToken = token => {\n        axios({\n            url: 'payment',\n            method: 'post',\n            data: {\n                amount: PriceForStripe,\n                token\n            }\n        }).then(response => {\n            alert('Payment successful')\n        }).catch(error => {\n            console.log('Payment error: ', JSON.parse(error))\n            alert('There was an issue with your payment. Please sure you use the provided credit card')\n        })\n    }\n\n    return (\n        <StripeCheckout\n            label='Pay now'\n            name='E-catalog'\n            billingAddress\n            shippingAddress\n            image='https://svgshare.com/i/CUz.svg'\n            description={`Your total is $${price}`}\n            amount={PriceForStripe}\n            panelLabel='Pay now'\n            token={onToken}\n            stripeKey={publishableKey}\n        />\n    )\n}\n\nexport default StripeCheckoutButton;","import React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport './checkout.styles.scss';\nimport { selectCartItems, selectCartTotal } from '../../redux/cart/cart.selectors';\nimport CheckoutItem from '../../components/checkout-item/checkout-item.component';\nimport StripeCheckoutButton from '../../components/strip-button/strip-button.component';\n\nconst CheckoutPage = ({ cartItems, total }) => (\n    <div className='checkout-page'>\n        <div className='checkout-header'>\n            <div className='header-block'>\n                <span>Product</span>\n            </div>\n            <div className='header-block'>\n                <span>Description</span>\n            </div>\n            <div className='header-block'>\n                <span>Quantity</span>\n            </div>\n            <div className='header-block'>\n                <span>Price</span>\n            </div>\n            <div className='header-block'>\n                <span>Remove</span>\n            </div>\n        </div>\n            {cartItems.map(cartItem =>\n                <CheckoutItem key={cartItem.id} cartItem={cartItem} />\n            )}\n        <div className='total'>TOTAL: ${total}</div>\n        <div className='test-warning'>\n            *Please use the folloving test credit card for payment*\n            <br/>\n            4242424242424242 - Exp: Any future date - CVC: Any 3 digits\t\n        </div>\n        <StripeCheckoutButton price={total} />\n    </div>\n)\n\nconst mapStateToProps = createStructuredSelector({\n    cartItems: selectCartItems,\n    total: selectCartTotal\n})\n\nexport default connect(mapStateToProps)(CheckoutPage);"],"sourceRoot":""}